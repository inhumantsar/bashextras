# reference this file at the end of any .bashrc

# get bashextra's directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# disable gnome-ssh-askpass if there's a desktop env running
if [ "$DESKTOP_SESSION" == "" ]; then
  unset SSH_ASKPASS
fi

# ssh agent
ps -p $SSH_AGENT_PID > /dev/null || eval $(ssh-agent -s)

# handy colour names
source "$DIR/promptcolours"

# for git info in ps1
source "$DIR/gitprompt"

# aliases
source "$DIR/aliases"

# dircolors
if [ -x /usr/bin/dircolors ]; then
    test -r "$DIR/dircolors" && eval $(dircolors -b "$DIR/dircolors") || eval "$(dircolors -b)"
fi

# syntax highlighting for less
# requires source-highlight package (debian/ubuntu)
if [ -f /usr/share/source-highlight/src-hilite-lesspipe.sh ]; then
  export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
  export LESS=' -R '
fi

# homebrew bash completion
if [ `uname -s` == "Darwin" ]; then
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
     . $(brew --prefix)/etc/bash_completion
  fi
fi


# awscli bash completion
if [ -f /usr/local/bin/aws ] && [ -f /usr/local/bin/aws_completer ]; then
  complete -C '/usr/local/bin/aws_completer' aws
fi


# Actions specific to Windows Subsystem for Linux
if grep -q Microsoft /proc/version; then
  export IS_WSL=true
  # for docker (also vagrant), requires Docker on Windows.
  export DOCKER_HOST=tcp://127.0.0.1:2375
  # for vagrant
  export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"
  export PATH="$PATH:/mnt/c/Program Files/Oracle/VirtualBox"
  # other vagrant vars include:
  # VAGRANT_WSL_WINDOWS_ACCESS_USER - Override current Windows username
  # VAGRANT_WSL_DISABLE_VAGRANT_HOME - Do not modify the VAGRANT_HOME variable
  # VAGRANT_WSL_WINDOWS_ACCESS_USER_HOME_PATH - Custom Windows system home path
else
  export IS_WSL=false
  export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="0"
fi


# eye candy
function build_prompt {

  # build exit code smiley
  if [ $? -eq 0 ]; then 
    face="${txtgrn}^_^${txtrst}"
  else
    face="${bldred}0_0${txtrst}"
  fi

  # build date time
  dt="${txtcyn}`date +\"%H:%M:%S\"`${txtrst}"

  # load and memory
  if [ "$IS_WSL" = true ]; then
    # for linux-on-windows (sad trombone)
    memload=""

  else
    # for everyone else
    # build free memory (not WSL friendly -- too slow)
    mem=$(free -m | grep "Mem:" | sed -re 's/\s+/ /g')
    freemem=$(echo "$mem" | cut -f4 -d\ )
    totalmem=$(echo "$mem" | cut -f2 -d\ )
    if [[ `echo "$freemem <= ($totalmem * 0.1)" | bc` -eq 1 ]]; then 
      mem="${bldred}${freemem}M${txtrst}";
    elif [[ `echo "$freemem > ($totalmem * 0.1)" | bc` -eq 1 ]] && [[ `echo "$freemem <= ($totalmem * 0.2)" | bc` -eq 1 ]]; then 
      mem="${txtylw}${freemem}M${txtrst}"
    else 
      mem="${txtgrn}${freemem}M${txtrst}"
    fi

    # build load display (not WSL friendly -- load avgs hardcoded: https://github.com/Microsoft/WSL/issues/2814)
    load_1min=`echo $(< /proc/loadavg) | cut -f 1 -d\ `
    cpucount=`grep -c ^processor /proc/cpuinfo`
    if [ `echo "$load_1min >= $cpucount" | bc` -eq 1 ]; then 
      load="${bldred}${load_1min}${txtrst}";
    elif [ `echo "$load_1min >= ($cpucount/2)" | bc` -eq 1 ] && [ `echo "$load_1min < $cpucount" | bc` -eq 1 ]; then 
      load="${txtylw}${load_1min}${txtrst}"
    else 
      load="${txtgrn}${load_1min}${txtrst}"
    fi
    memload="${mem} ${load} "
  fi

  # get user and host names
  userhost="${txtwht}[${USER}@${HOSTNAME}]${txtrst}"

  # get pwd. this emulates bash's expansion of \w to give ~ instead of /home/moo
  # add git information if applicable
  wd=`pwd | sed -E "s-^$HOME($|(/.*))-~\2-"`
  # wd=$(pwd)
  wd="${txtcyn}${wd}${txtrst}$(__git_ps1)"

  # print it all
  echo -e " ${face} ${dt} ${userhost} ${memload}${wd}"
}

PROMPT_COMMAND='build_prompt'
PS1="\$ "
